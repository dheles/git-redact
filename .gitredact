#!/bin/bash

# OS-specific word boundary syntax
if [ $(uname) == 'Darwin' ]; then
  wordboundary_left="[[:<:]]"
  wordboundary_right="[[:>:]]"
fi

redactfiles=("$@")
#
### COLLECT ###
#
# store the values to be swapped in an array
swap_array=($(sed -n '/^#/n
/ \= / ! {
  s/^\(.*\)$/\1 remove/p
}
s/\(.*\) \= \(.*\)$/\1 \2/p
' < .gitredact-template))

len=${#swap_array[*]}

#for value in ${swap_array[*]}; do
  #echo $value
#done
#echo "The length of swap_array is ${#swap_array[*]}."

# write the redaction rules to a file
# store our redact/replace values and their line numbers in an array
for ((i=0; i<$len; i=(i+2))); do

  # capture the original word boundaries and the term they enclose
  echo ${swap_array[i]} | grep -q '\\b'
  if [ $? == 0 ]; then
    # there is no array.push() in bash...
    orig_word_boundary[${#orig_word_boundary[*]}]=$i
    orig_word_boundary[${#orig_word_boundary[*]}]=$(echo ${swap_array[i]} | sed -nE '
      s/(\\b).+\\b/\1/p
    ')
    orig_word_boundary[${#orig_word_boundary[*]}]=$(echo ${swap_array[i]} | sed -nE '
      s/\\b(.+)\\b/\1/p
    ')
    orig_word_boundary[${#orig_word_boundary[*]}]=$(echo ${swap_array[i]} | sed -nE '
      s/\\b.+(\\b)/\1/p
    ')
  fi

  # replace any word boundaries with the proper versions for the OS
  swap_array[i]=$(echo "${swap_array[i]}" | sed -E '
    s/\\b(.+)\\b/[[:<:]]\1[[:>:]]/g
  ')

  # store the line number of the match
  results[${#results[*]}]=$(sed -n "/${swap_array[i]}/ =" $1)
  
  if [ ${swap_array[(i+1)]} == 'remove' ]; then
    echo -e "/${swap_array[i]}/ d" >> redact.sed
    results[${#results[*]}]=$(sed -n "s/.*\(${swap_array[i]}\).*/\1/gp" $1)
    results[${#results[*]}]='remove'
  else
    echo -e "s/${swap_array[i]}/${swap_array[(i+1)]}/g" >> redact.sed
    results[${#results[*]}]=${swap_array[i]}
    results[${#results[*]}]=${swap_array[(i+1)]}
  fi
done

r_len=${#results[*]}

#for value in ${results[*]}; do
  #echo $value
#done
#echo "The length of results is ${#results[*]}."

#echo ${results[3]}

#
### CONFIRM ###
#
# print the results to standard output and prompt for approval
for ((i=0; i<$r_len; i=(i+3))); do

  # if we had to swap word boundaries, print the original syntax here
  wb_len=${#orig_word_boundary[*]}
  for ((j=0; j<$wb_len; j=(j+4))); do
    if (( i-(i/3) == ${orig_word_boundary[j]} )); then
      original="${orig_word_boundary[j+1]}${orig_word_boundary[j+2]}${orig_word_boundary[j+3]}"
    else
      original="${results[(i+1)]}"
    fi
  done

  if [ ${results[(i+2)]} == 'remove' ]; then
    echo "I removed line ${results[i]}, which contained \"$original\"."
  else
    echo "On line ${results[i]}, I replaced \"$original\" with \"${results[(i+2)]}\"."
  fi
done

echo -e "\n--> You approve these changes? (Hit \"y\" or \"n\")"

#for file in ${redactfiles[*]}; do
  #for ((i=0; i<$len; i=(i+2))); do
    #sed '' $file
  #done
#done

#
### REDACT ###
#
sed -f redact.sed < $1 > test_redaction.txt

#sed -n '$ s/redacted/&/p' ./.gitredact

redacted=true
