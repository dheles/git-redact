#!/bin/bash

# OS-specific word boundary syntax
# ... some test ...
# wordboundary_left = \b || \< || [[:<:]]
# wordboundary_right = \b || \> || [[:>:]]

redactfiles=("$@")

# store the values to be swapped in an array
swap_array=($(sed -n '/^#/n
/ \= / ! {
  s/^\(.*\)$/\1 remove/p
}
s/\(.*\) \= \(.*\)$/\1 \2/p
' < .gitredact-template))

len=${#swap_array[*]}

# replace any word boundaries with the proper versions for the OS
for ((i=0; i<$len; i=(i+2))); do
  swap_array[i]=$(echo "${swap_array[i]}" | sed -E '
    s/\b(.+)\b/[[:<:]]\1[[:>:]]/g
  ')
done

# in swap_array, replace the pattern with its actual match
function replacePatternWithMatch () {
  if [ "$1" != "$(grep -om 1 $1 $2)" ]; then
    swap_array[$3]="$(grep -om 1 $1 $2)"
    #echo ${swap_array[$3]}
  fi
 
  # there is no array.push() in bash...
  results[${#results[*]}]=$(sed -n "/$1/ =" $2)
}

#for value in ${swap_array[*]}; do
  #echo $value
#done
#echo "The length of swap_array is ${#swap_array[*]}."

# write the redaction rules to a file
# store our redact/replace values and their line numbers in an array
for ((i=0; i<$len; i=(i+2))); do
  if [ ${swap_array[(i+1)]} == 'remove' ]; then
    echo -e "/${swap_array[i]}/ d" >> redact.sed
    replacePatternWithMatch ${swap_array[i]} $1 i
    results[${#results[*]}]=${swap_array[i]}
    results[${#results[*]}]='remove'
  else
    echo -e "s/${swap_array[i]}/${swap_array[(i+1)]}/g" >> redact.sed
    replacePatternWithMatch ${swap_array[i]} $1 i
    results[${#results[*]}]=${swap_array[i]}
    results[${#results[*]}]=${swap_array[(i+1)]}
  fi
done

r_len=${#results[*]}

#for value in ${results[*]}; do
  #echo $value
#done
#echo "The length of results is ${#results[*]}."

#echo ${results[3]}

# print the results to standard output and prompt for approval
for ((i=0; i<$r_len; i=(i+3))); do
  if [ ${results[(i+2)]} == 'remove' ]; then
    echo "I removed line ${results[i]}, which contained \"${results[(i+1)]}\"."
  else
    echo "On line ${results[i]}, I replaced \"${results[(i+1)]}\" with \"${results[(i+2)]}\"."
  fi
done

echo -e "\n--> You approve these changes? (Hit \"y\" or \"n\")"

#for file in ${redactfiles[*]}; do
  #for ((i=0; i<$len; i=(i+2))); do
    #sed '' $file
  #done
#done

sed -f redact.sed < $1 > test_redaction.txt

#sed -n '$ s/redacted/&/p' ./.gitredact

redacted=true
