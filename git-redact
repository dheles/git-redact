#!/bin/bash

# > git-redact <
# Removes things you don\'t want in your commits.
# By parisminton for Concrete Daydreams.
# <parisminton@da.ydrea.ms>

vrs='v.1'
lastchange='3/14/13'

echo -e "\n--> git-redact $vrs $lastchange <--\n"

# OS-specific word boundary syntax
if [ $(uname) == 'Darwin' ]; then
  wordboundary_left="[[:<:]]"
  wordboundary_right="[[:>:]]"
fi

#files_to_redact=$(git status --porcelain | sed 's/^.. \(.*\)$/\1/g')
files_to_redact="fakedocument.txt fakedocument_2.txt fakedocument_3.txt"


#
### SET UP ###
#
# create .redacted_originals and .gitredact if they don\'t already exist. hide them.

if [ ! -d .redacted_originals ]; then
  mkdir .redacted_originals
  echo -e "  I created a $(tput setaf 4).redacted_originals$(tput sgr0) directory. It's hidden, so use 'ls -a' to see it in directory listings.\n"
fi

if [ -f .gitignore ]; then
  grep -q ".gitredact" .gitignore
  if [ $? -ne 0 ]; then
    echo -e ".gitredact" >> .gitignore
    echo -e "  I added $(tput setaf 4)\".gitredact\"$(tput sgr0) to your $(tput setaf 4).gitignore$(tput sgr0) file.\n"
  fi

  grep -q ".redacted_originals" .gitignore
  if [ $? -ne 0 ]; then
    echo -e ".redacted_originals" >> .gitignore
    echo -e "  I added $(tput setaf 4)\".redacted_originals\"$(tput sgr0) to your $(tput setaf 4).gitignore$(tput sgr0) file.\n"
  fi
else
  echo -e ".gitredact\n.redacted_originals" >> .gitignore
  echo -e "  I created a $(tput setaf 4).gitignore$(tput sgr0) file and added $(tput setaf 4)\".gitredact\"$(tput sgr0) and $(tput setaf 4)\".redacted_originals\"$(tput sgr0) to it.\n"
fi
 
if [ ! -f .gitredact ]; then
  echo -e "# These are patterns for sed matching, not strings.\n# pattern_to_be_replaced = pattern_to_replace_it\n# pattern_to_be_removed" > .gitredact
  echo -e "  I created a $(tput setaf 4).gitredact$(tput sgr0) file. It's hidden, so use 'ls -a' to see it in directory listings. Before I can do any redactions, you'll need to add patterns to it.\n\n  Your next 'git add' will stage your unredacted code.\n"
  exit 1
fi


#
### CHECK ###
#
# before redacting, make sure old redactions have been cleared and reverted

if [ -f redact.sed ]; then
  rm redact.sed
fi

redact_sed_written=false

if [[ "$(ls -1A .redacted_originals | wc -l)" -gt 0 ]]; then
  echo -e "  It looks like there are original files in the $(tput setaf 4).redacted_originals$(tput sgr0) folder. I'll restore them ...\n"
  for file in $(ls -1A .redacted_originals); do
    original_basename=$(echo -e $file | sed 's/orig_\(.*$\)/\1/g')
    if [ -f $original_basename ]; then
      rm "$original_basename"
    fi
    mv ".redacted_originals/$file" "$original_basename"
  done
fi


#
### COLLECT ###
#
# store the values to be swapped in an array

OLD_IFS=$IFS
IFS=$'\n'

swap_array=($(sed -n '/^#/ ! {
  / \= / ! {
    s/^\(.*\)$/\1\
remove/p
  }
  s/\(.*\) \= \(.*\)$/\1\
\2/p
}
' < .gitredact))

IFS=$OLD_IFS

len=${#swap_array[*]}

# for ((i=0; i<$len; i=(i+1))); do
  # echo ${swap_array[i]}
# done

# echo -e "swap_array's length is ${#swap_array[*]}"

if [[ ${#swap_array[*]} -eq 0 ]]; then
  echo -e "  $(tput setaf 1)Hmmm ...$(tput sgr0) I didn't find any patterns I could use to make redactions. Have you filled out your $(tput setaf 1).gitredact$(tput sgr0) file?\n\n  For now, I've made no redactions. Your next 'git add' will stage your unredacted code.\n"
  exit 1
fi
  
for filename in $files_to_redact; do

  # write the redaction rules to a file
  # store our redact/replace values and their line numbers in an array
  for ((i=0; i<$len; i=(i+2))); do

    # replace any word boundaries with the proper versions for the OS
    swap_array[i]=$(echo "${swap_array[i]}" | sed -E "
      s/^\\\b/$wordboundary_left/
      s/\\\b$/$wordboundary_right/
    ")

    # store the line number of the match
    results[${#results[*]}]=$(sed -n "/${swap_array[i]}/ =" $filename)
    
    # store the actual match, not just the user\'s pattern
    the_match=$(sed -n "s/.*\(${swap_array[i]}\).*/\1/p" $filename)

    # the matched value only needs to be printed once in the results
    condensed_match=$(echo $the_match | sed -n "s/.*\(${swap_array[i]}\).*/\1/p")

    # if the pattern originally included word boundaries, restore them in the result
    if [[ "${swap_array[i]}" =~ "$wordboundary_left" ||
          "${swap_array[i]}" =~ "$wordboundary_right" ]]; then
      condensed_match=$(echo $condensed_match | sed "
        s/$wordboundary_left/\\\b/g
        s/$wordboundary_right/\\\b/g
      ")
    fi

    results[${#results[*]}]=$condensed_match

    # write redaction instructions to a file
    if [ "${swap_array[(i+1)]}" == 'remove' ]; then
      if ! $redact_sed_written; then
        echo -e "/${swap_array[i]}/ d" >> redact.sed
      fi
      results[${#results[*]}]='remove'
    else
      if ! $redact_sed_written; then
        echo -e "s/${swap_array[i]}/${swap_array[(i+1)]}/g" >> redact.sed
      fi
      results[${#results[*]}]=${swap_array[(i+1)]}
    fi

  done
  
  redact_sed_written=true

  r_len=${#results[*]}

  # for ((i=0; i<$r_len; i=(i+1))); do
    # echo ${results[i]}
  # done

  #
  ### CONFIRM ###
  #
  # print the results to standard output and prompt for approval
  echo -e "$(tput smul)\nI made the following changes in $filename:$(tput rmul)\n"

  for ((i=0; i<$r_len; i=(i+3))); do

    # if redactions were made on multiple lines, separate line numbers with commas
    lines=$(echo ${results[i]} | sed -E '
      s/[0-9]+/line &/
      s/([0-9]+) /\1, /g
      s/line ([0-9]+,)/lines \1/
      s/([0-9]+), ([0-9]+)$/\1 and \2/
    ')

    if [ "${results[i]}" != '' ]; then
      if [ "${results[(i+2)]}" == 'remove' ]; then
        echo "  I removed $lines, which contained \"${results[(i+1)]}\"."
      else
        echo "  On $lines, I replaced \"${results[(i+1)]}\" with \"${results[(i+2)]}\"."
      fi
    fi
  done

  #
  ### REDACT ###
  #
  sed -f redact.sed < $filename > redacted_$filename

  unset results

done

until [ "$approve" == "y" -o "$approve" == "n" ]; do
  echo -e "$(tput setaf 4)\n\n--> You approve these changes? (Hit \"y\" or \"n\")\n$(tput sgr0)"
  read approve
done

if [ "$approve" == "y" ]; then
  if [ -d .redacted_originals ]; then
    for filename in $files_to_redact; do
      mv $filename .redacted_originals/orig_$filename
      mv redacted_$filename $filename
    done
    echo -e "\n  Cool. I moved the original files to the $(tput setaf 4).redacted_originals$(tput sgr0) directory and put the redacted versions in their place. Your next 'git add' will stage the redacted versions.\n"
  fi
elif [ "$approve" == "n" ]; then
  for filename in $files_to_redact; do
    rm redacted_$filename
  done
  echo -e "\n  OK. Those redactions have not taken effect, and your next 'git add' will stage your unredacted code. \n"
fi

rm redact.sed
exit 0
